package dynamite;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;


import javax.swing.SwingUtilities;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.BorderFactory;
import javax.swing.Timer;


public class Dynamite {
	
	public static void main(String[] args) {
		
		SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI(); 
            }
        });
	}
		
	private static void createAndShowGUI() {
	    JFrame jf = new JFrame("Dynamite");
	    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    jf.setSize(1280, 720);
	    jf.add(new MyPanel());
	    jf.pack();
	    jf.setVisible(true);
	}
	
}

class MyPanel extends JPanel implements ActionListener {
	
	int backgroundR = 40, backgroundG = 0, backgroundB = 0;
	int x1 = 0, x2 = 500, y1 = 100, y2 = 500;
	boolean backgroundRswitch = true, rectMoveSwitchX = false, rectMoveSwitchY = false, rectMoveSwitchNegX = false, rectMoveSwitchNegY = false;
	Timer tm = new Timer(12, this);
	JLabel jl = new JLabel("Throw me into fire");
	int varyingWidth = 1280, varyingHeight = 720;
	int twoMeasures = 234;
	int timeCorrection = 128;
	int timeCorrection2 = 60;
	int rectWidth = 100, rectHeight = 100, rectX = 200, rectY = 200;
	int rectWidthBridge = 100, rectHeightBridge = 100, rectXBridge = 640, rectYBridge = 360;
	int radians = 0, bridgeRadians = 0;
	boolean bridge = false;
	int newRed = 250;

    public MyPanel() {
        setBackground(new Color(backgroundR, 0, 0));
    }

    public Dimension getPreferredSize() {
        return new Dimension(1280, 720);
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);  
        jl.setFont(new Font("Serif", Font.ITALIC, 48));
        jl.setForeground(Color.GRAY);
        g.setColor(new Color(backgroundR, 0, 0));
        g.fillRect(0, 0, varyingWidth, varyingHeight);
        g.setColor(new Color(200, 200, 200));
        g.fillOval(x1, -7, 5, 5);
        
        if (varyingWidth == 0) {
        	varyingWidth = 1280;
        	varyingHeight = 720;
        }
        if (x1 == twoMeasures * 2) {
        	jl.setText("It's better than the sea");
    	}
        if (x1 == twoMeasures * 4) {
        	jl.setText("Hold on tight I'm dynamite, I'll");
    	}
        if (x1 == twoMeasures * 6) {
        	jl.setText("...make you history");
    	}
        if (x1 >= twoMeasures * 10 && x1 < twoMeasures * 46) {
        	jl.setText("");

        	varyingWidth -= 2;
        	varyingHeight--;
        }
        
        if (x1 == twoMeasures * 46 + timeCorrection) {
        	jl.setText("Throw me into fire");
        	varyingWidth = 1280;
        	varyingHeight = 720;
        }
        if (x1 == twoMeasures * 48 + timeCorrection) {
        	jl.setText("It's better than the sea");
        }
        if (x1 == twoMeasures * 50 + timeCorrection) {
        	jl.setText("Hold on tight I'm dynamite, I'll");
    	}
        if (x1 == twoMeasures * 52 + timeCorrection) {
        	jl.setText("...make you history");
    	}
        
        if (x1 >= twoMeasures * 57 + timeCorrection && x1 < (twoMeasures * 93) + timeCorrection2) {
        	jl.setText("");
        	g.setColor(new Color(0, 200, 0, 100));
        	Graphics2D g2dim = (Graphics2D)g;
//        	Rectangle rect2 = new Rectangle(rectX, rectY, rectWidth, rectHeight);
//        	g2dim.rotate(Math.toRadians(radians), rectX, rectY);
//        	g2dim.draw(rect2);
//            g2dim.fill(rect2);
            for (int i = 0; i < 350; i+=10) {
            	Rectangle rect3 = new Rectangle(rectX, rectY, rectWidth, rectHeight);
            	g2dim.rotate(Math.toRadians(radians + 1), rectX, rectY);
            	g2dim.draw(rect3);
                g2dim.fill(rect3);
            }
        	rectMoveSwitchX = true;
        	varyingWidth -= 2;
        	varyingHeight--;
        }
        
        if (rectX >= 1000) {
        	rectMoveSwitchX = false;
        	rectMoveSwitchY = true;
        	rectMoveSwitchNegX = false;
        	rectMoveSwitchNegY = false;
        }
        if (rectY >= 500) {
        	rectMoveSwitchY = false;
        	rectMoveSwitchX = false;
        	rectMoveSwitchNegX = true;
        	rectMoveSwitchNegY = false;
        }
        if (rectX < 200) {
        	rectMoveSwitchNegX = false;
        	rectMoveSwitchX = false;
        	rectMoveSwitchNegY = true;
        	rectMoveSwitchY = false;
        }
        if (rectY < 200) {
        	rectMoveSwitchX = true;
        	rectMoveSwitchY = false;
        	rectMoveSwitchNegX = false;
        	rectMoveSwitchNegY = false;
        }
        
        
        if (x1 == twoMeasures * 93 + timeCorrection2) {
        	jl.setText("Throw me into fire");
        	varyingWidth = 1280;
        	varyingHeight = 720;
        }
        if (x1 == twoMeasures * 95 + timeCorrection2) {
        	jl.setText("It's better than the sea");
        }
        if (x1 == twoMeasures * 97 + timeCorrection2) {
        	jl.setText("Hold on tight I'm dynamite, I'll");
    	}
        if (x1 == twoMeasures * 99 + timeCorrection2) {
        	jl.setText("...make you history");
    	}
        
        if (x1 == twoMeasures * 101 + timeCorrection2) {
        	jl.setText("Throw me into fire");
        }
        if (x1 == twoMeasures * 103 + timeCorrection2) {
        	jl.setText("It's better than the sea");
        }
        if (x1 == twoMeasures * 105 + timeCorrection2) {
        	jl.setText("Hold on tight I'm dynamite, I'll");
    	}
        if (x1 == twoMeasures * 107 + timeCorrection2) {
        	jl.setText("...make you history");
    	}
        
        if (x1 >= twoMeasures * 109 + timeCorrection2 && x1 < twoMeasures * 116 + timeCorrection2) {
        	jl.setText("");
        	
        	if (x1 % twoMeasures == 0) {
    			Graphics2D g2dim = (Graphics2D)g;
            	Rectangle rect2 = new Rectangle(0, 0, 1280, 720);
            	g2dim.draw(rect2);
                g2dim.fill(rect2);
    		}
        }
        if (x1 >= twoMeasures * 116 + timeCorrection2) {
        	bridge = true;
        	Graphics2D g2dim = (Graphics2D)g;
        	g.setColor(new Color(200, 200, 0, 100));
        	for (int i = 0; i < 350; i+=10) {
            	Rectangle rect3 = new Rectangle(rectXBridge, rectYBridge, rectWidthBridge, rectHeightBridge);
            	g2dim.rotate(Math.toRadians(bridgeRadians + i), rectXBridge, rectYBridge);
            	g2dim.draw(rect3);
                g2dim.fill(rect3);
            }
        	g.setColor(new Color(240, 240, 255, 200));
        	for (int i = 0; i < 350; i+=10) {
            	Rectangle rect3 = new Rectangle(rectXBridge, rectYBridge, rectWidthBridge + 150, rectHeightBridge + 150);
            	g2dim.rotate(Math.toRadians(bridgeRadians + i), rectXBridge, rectYBridge);
            	g2dim.draw(rect3);
                g2dim.fill(rect3);
            }
        }
        
        
    	this.add(jl);
        tm.start();
    }  
    
	public void actionPerformed(ActionEvent e) {
		x1+=2;
		y1 = y1 + 1;
		if (rectMoveSwitchX == true) {
			rectX++;
			radians++;
		}
		if (rectMoveSwitchY == true) {
			rectY++;
			radians++;
		}
		if (rectMoveSwitchNegX == true) {
			rectX--;
			radians++;
		}
		if (rectMoveSwitchNegY == true) {
			rectY--;
			radians++;
		}

		
		if (backgroundRswitch == true) {
			backgroundR++;
			if (backgroundR >= 250) {
				backgroundRswitch = false;
			}
		}
		else {
			backgroundR--;
			if (backgroundR <= 10) {
				backgroundRswitch = true;
			}
		}
		
		if (bridge == true) {
			bridgeRadians++;
		}

		repaint();
	}
}

